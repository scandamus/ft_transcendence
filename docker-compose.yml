services:
  backend:
    build: backend
    container_name: backend
    ports:
      - "8001:8001"
    volumes:
      - ./backend/scandamus:/app
    depends_on:
      - redis
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - BACKEND_SECRET_KEY=${BACKEND_SECRET_KEY}
      - GAME_JWT_SIGNING_KEY=${GAME_JWT_SIGNING_KEY}
      - CHANNEL_SECRET_KEY=${BACKEND_CHANNEL_SECRET_KEY}
      - DEBUG=${DEBUG}
      - BACKEND_JWT_SIGNING_KEY=${BACKEND_JWT_SIGNING_KEY}
      - DJANGO_SU_USER=${DJANGO_SU_USER}
      - DJANGO_SU_MAIL=${DJANGO_SU_MAIL}
      - DJANGO_SU_PASSWORD=${DJANGO_SU_PASSWORD}
      - DJANGO_PLAYER1_USER=${DJANGO_PLAYER1_USER}
      - DJANGO_PLAYER1_MAIL=${DJANGO_PLAYER1_MAIL}
      - DJANGO_PLAYER1_PASSWORD=${DJANGO_PLAYER1_PASSWORD}
      - DJANGO_PLAYER2_USER=${DJANGO_PLAYER2_USER}
      - DJANGO_PLAYER2_MAIL=${DJANGO_PLAYER2_MAIL}
      - DJANGO_PLAYER2_PASSWORD=${DJANGO_PLAYER2_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - CREATE_TOURNAMENT_TIMELIMIT_MIN=${CREATE_TOURNAMENT_TIMELIMIT_MIN}
    restart: always
    networks:
      - backend-network

  frontend:
    build:
      context: ./frontend
    environment:
      - SECRET_KEY=${FRONTEND_SECRET_KEY}
      - DEBUG=${DEBUG}
      - CERTS=${CERTS}
      - COUNTRY=${COUNTRY}
      - STATE=${STATE}
      - LOCALITY=${LOCALITY}
      - ORGANIZATION=${ORGANIZATION}
      - ORGANIZATION_UNIT=${ORGANIZATION_UNIT}
      - COMMON_NAME=${DOMAIN_NAME}
      - EMAIL=${EMAIL}
      - DOMAIN_NAME=${DOMAIN_NAME}
      - CREATE_TOURNAMENT_TIMELIMIT_MIN=${CREATE_TOURNAMENT_TIMELIMIT_MIN}
    container_name: frontend
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/static_vol:/var/www/html
      - ${CERTS}:/etc/nginx/ssl
    restart: always
    networks:
      - frontend-network
      - backend-network

  db:
    image: postgres:13
    container_name: db
    volumes:
      - ./postgres_vol:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    restart: always
    networks:
      - backend-network

  pong-server:
    build: pong-server
    container_name: pong-server
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SIGNING_KEY=${PONG_SERVER_SIGNING_KEY}
      - SECRET_KEY=${PONG_SERVER_SECRET_KEY}
      - GAME_JWT_SIGNING_KEY=${GAME_JWT_SIGNING_KEY}
      - CHANNEL_SECRET_KEY=${PONG_SERVER_CHANNEL_SECRET_KEY}
      - POSTGRES_USER=${DB_USER}
    depends_on:
      - redis
    ports:
      - "8002:8002"
    restart: always
    volumes:
      - ./pong-server/game-server:/app
    networks:
      - backend-network

  pong4-server:
    build: pong4-server
    container_name: pong4-server
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SIGNING_KEY=${PONG_SERVER_SIGNING_KEY}
      - SECRET_KEY=${PONG_SERVER_SECRET_KEY}
      - GAME_JWT_SIGNING_KEY=${GAME_JWT_SIGNING_KEY}
      - CHANNEL_SECRET_KEY=${PONG_SERVER_CHANNEL_SECRET_KEY}
      - POSTGRES_USER=${DB_USER}
    depends_on:
      - redis
    ports:
      - "8003:8003"
    restart: always
    volumes:
      - ./pong4-server/game-server:/app
    networks:
      - backend-network

  redis:
    image: redis:7
    restart: always
    networks:
      - backend-network
  # ports:
  #   - "6379:6379"

networks:
  backend-network:
    driver: bridge
  frontend-network:
    name: frontend-network
    external: true
